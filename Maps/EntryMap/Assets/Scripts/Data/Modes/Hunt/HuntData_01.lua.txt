---============================================================================
-- SECTION -- About
---============================================================================
--[[
    Time-Key Tables
        Many tables use a Time-Key to indicate when a certain event should occur.
        Each Key is Unique, as in, you cannot have multiple of the same Key (like [1] and [1]) in the table.

        Example:
            [1] = {} -- Occurs after 1 second of Game Time.
            [30] = {} -- Occurs after 30 seconds of Game Time.
            [100] = {} -- Occurs after 100 seconds of Game Time.
        
        Places where Time-Key is used:
            - Periodic Data
                - Spawn Rates
                - Timed Modifiers
            - Fixed Data
            - Elite Data
            - Boss Data
            - Loot Data

]]
---============================================================================
-- !SECTION -- About
-- SECTION -- Libraries
---============================================================================

local Vector2 = require("Class/Vector2")

local LootData = require("Data/SimpleUnits/LootData")
local DropTables = require("Data/DropTables")
local SimpleDropTableData = require("Data/SimpleDropTableData")

local HostileData = require("Data/SimpleUnits/HostileData")
local Elites = require("Game/AI/Elites")
local Bosses = require("Game/AI/Bosses")

local Conditions = require("Data/Events/ConditionData")

local EventSpawnData = require("Data/EventData/EventSpawnData")
local EventEliteData = require("Data/EventData/EventEliteData")
local EventStructureData = require("Data/EventData/EventStructureData")

local StandardHuntEvents = require("Data/Modes/Hunt/StandardHuntEvents")

local Modifier = require("SharedData/Class/Modifier")

local Forest = require("Data/Biomes/Forest")
local Thicket = require("Data/Biomes/Thicket")
local Swamp = require("Data/Biomes/Swamp")

local Help = require("Help")

---============================================================================
-- !SECTION -- Libraries
-- SECTION -- Initialize
---============================================================================

---@type HuntData
local Data = {}

---============================================================================
-- !SECTION -- Initialize
-- SECTION -- Biome
---============================================================================

Data.Biome = Forest

---============================================================================
-- !SECTION -- Initialize
-- SECTION -- Camera Settings
---============================================================================

Data.CameraSettings = {
    [120] = {
        DistanceModifier = 0.50,
    },
    [240] = {
        DistanceModifier = 0.50,
    },
}

---============================================================================
-- !SECTION -- Camera Settings
-- SECTION -- Difficulty Settings
---============================================================================

Data.DifficultySettings = {
    Modifier.New(STAT.StageDensity, 80, SCALING.Scaled), -- Base Density
    Modifier.New(STAT.StageDensity, 0.10, SCALING.Additive), -- 10% Increase per Stage

    Modifier.New(STAT.Count, 0.10, SCALING.Additive), -- 10% Increase per Stage

    Modifier.New(STAT.Health, 1.20, SCALING.Multiplier), -- 20% Increase per Stage
    Modifier.New(STAT.Thorns, 1.20, SCALING.Multiplier), -- 20% Increase per Stage

    Modifier.New(STAT.MinionHealth, 1.20, SCALING.Multiplier), -- 20% Increase per Stage
    Modifier.New(STAT.MinionDamage, 1.20, SCALING.Multiplier), -- 20% Increase per Stage

    Modifier.New(STAT.MoveSpeed, 0.02, SCALING.Additive), -- 2% Increase per Stage
}

---============================================================================
-- !SECTION -- Difficulty Settings
-- SECTION -- Fixed Spawns
---============================================================================

Data.Duration = 10

Data.Register = {
    [HostileData.Walker] = {
        SimpleDropTableData.Gold,
    },
}

Data.Fixed = {
    [1] = {
        Type = HostileData.Walker,
        Count = 10,
        Target = "Hero",
        -- Target = "Star",
        -- FormationType = FORMATION_TYPE.Stream,
        -- Properties = {
        --     [StreamProperties.distance] = 10,
        -- },
        -- Modifiers = {
        --     Modifier.New(STAT.Health, 1.00, SCALING.Multiplier),
        --     Modifier.New(STAT.Thorns, 1.00, SCALING.Multiplier),
        -- },
        -- SimpleDropTable = {
        --     SimpleDropTableData.SmallExperienceChance,
        -- },
    },
}

---============================================================================
-- !SECTION -- Fixed Spawns
-- SECTION -- Event Data
---============================================================================

local Random_Walkers = {
    EventTypeOptions = {
        EventSpawnData.RandomWalker,
    },
    Conditions = {
        Conditions.StageDensity,
        Conditions.EventCooldown_2,
    },
}

Data.GameEventData = {
    Random_Walkers,
}

---============================================================================
-- !SECTION -- Event Data
-- SECTION -- Boss Data
---============================================================================

Data.Boss = {
    [300] = {
        Type = Bosses.Types.Shieldbearer,
        -- Difficulty = 100,
        DropTable = DropTables.Boss101,
        Modifiers = {
            Modifier.New(STAT.Health, 1.10, SCALING.Multiplier), -- How much Health the Boss has.
            Modifier.New(STAT.Armor, 5, SCALING.Scaled), -- How much Flat Damage Reduction the Boss has.
            Modifier.New(STAT.Armor, 0.05, SCALING.Additive), -- How much Percentage Damage Reduction the Boss has.

            -- Modifier.New(STAT.Health, 0.50, SCALING.Multiplier), -- How much Health the Boss has.
            -- Modifier.New(STAT.Thorns, 1.50, SCALING.Multiplier), -- How much damage the Boss does when it comes into contact with the player.
            -- Modifier.New(STAT.MoveSpeed, 1.00, SCALING.Multiplier), -- How fast the Boss is.
            -- Modifier.New(STAT.CollisionSize, 1.25, SCALING.Multiplier), -- How big the Boss is.
            -- Modifier.New(STAT.StaggerResistance, 1.15, SCALING.Multiplier), -- How resistant the Boss is to Stagger.
            -- Modifier.New(STAT.AddedStaggerResistance, 0.35, SCALING.Multiplier), -- The amount of increased resistance to Stagger added after being Staggered.

            -- Modifier.New(STAT.MinionHealth, 2.00, SCALING.Multiplier), -- How much Health the Boss's Minions have.
            -- Modifier.New(STAT.MinionDamage, 1.00, SCALING.Multiplier), -- How much damage the Boss's Minions do.
            -- Modifier.New(STAT.MinionSpeed, 1.20, SCALING.Multiplier), -- How fast the Boss's Minions are.
        },
        WarningSettings = {
            Message = "Boss Incoming!",
            Duration = 5,
        },
    },
}

---============================================================================
-- !SECTION -- Boss Data
---============================================================================

return Data
