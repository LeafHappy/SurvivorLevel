-- -- ================================================================================================
-- -- SECTION -- About
-- -- ================================================================================================
-- --[[
--     Throws Axes that Travel in a Line, dealing Damage on Impact in an Area.
-- ]]
-- -- ================================================================================================
-- -- !SECTION -- About
-- -- SECTION -- Libraries
-- -- ================================================================================================

-- local Core = require("Core")
-- local EJS = require("Data/EJS")

-- local Vector2 = require("Class/Vector2")
-- local Vector3 = require("Class/Vector3")
-- local SimpleUnit = require("Class/Simple/SimpleUnit")

-- local Ease = require("Data/Ease")

-- local EffectPath = require("SharedData/Class/EffectPath")

-- local Help = require("Help")

-- -- ================================================================================================
-- -- !SECTION -- Libraries
-- -- SECTION -- Local Variables
-- -- ================================================================================================

-- local REF = {
--     -- Abilities
--     Ability = .Ability("Weapon - Frozen Axe"),

--     -- Tags
--     IsPrimaryWeapon = .Tag("Weapon - Frozen Axe - IsPrimaryWeapon"),

--     -- Effects
--     Scan = .Effect("Weapon - Frozen Axe - Scan"),
--     ScanFallback = .Effect("Weapon - Frozen Axe - Scan - Fallback"),
--     Success = .Effect("Weapon - Frozen Axe - Success"),
--     Launch = .Effect("Weapon - Frozen Axe - Launch"),
--     OnEnter = .Effect("Weapon - Frozen Axe - OnEnter"),
--     OnEnterProp = .Effect("Weapon - Frozen Axe - OnEnter - Prop"),
--     Damage = .Effect("Weapon - Frozen Axe - Damage"),
--     ImpactVFX = .Effect("Weapon - Frozen Axe - Impact VFX"),

--     -- Behaviors
--     ProjectileSpeed = .Behavior("Weapon - Frozen Axe - Projectile Speed"),

--     -- Units
--     Projectile = .Unit("Weapon - Frozen Axe - Projectile"),

--     -- Filter
--     ProjectileFilter = .CreateUnitFilter({ name = .Unit("Weapon - Frozen Axe - Projectile") }),
-- }

-- ---@type table<number, Hero>
-- local _Heroes = {}

-- local MODEL_SCALE = 0.6
-- local IMPACT_VFX_SCALE = 0.5

-- -- ================================================================================================
-- -- !SECTION -- Local Variables
-- -- SECTION -- Local Functions
-- -- ================================================================================================

-- local function OnProjectileSpawn()
--     local projectile = DCEI.TriggeringUnit

--     local player_id = DCEI.GetUnitPlayerId(projectile)
--     local hero = _Heroes[player_id]

--     local size = hero:GetStat(STAT.SkillSize, REF.Ability)
--     Help.SetModelScale(projectile, size * MODEL_SCALE, 0.10, Ease.OutCubic)

--     SimpleUnit.ModifyCollision(projectile, CollisionLayers.None, CollisionLayers.Hostile, size)

--     local collision_effects = {
--         -- We can do Prop-Specific Damage here
--         -- SimpleUnit.GenerateCollisionEffect(REF.OnEnterProp, CollisionTiming.Start, 1, SIMPLE_TAG.Prop),
--         SimpleUnit.GenerateCollisionEffect(REF.OnEnter, CollisionTiming.Start, 1),
--     }

--     SimpleUnit.ModifyCollisionEffect(projectile, collision_effects)
-- end

-- ---comment
-- ---@param hero Hero
-- ---@param target_position Vector2
-- local function LaunchProjectile(hero, target_position)
--     if not Help.ValidateUnit(hero.unit) then
--         return
--     end

--     DCEI.CreateEffectAtPosition(REF.Launch, hero.unit, target_position.x, target_position.y)
-- end

-- ---comment
-- ---@param hero Hero
-- ---@param target_position Vector2
-- ---@param delay number
-- local function LaunchProjectileWithDelay(hero, target_position, delay)
--     local timer = Core.Timer.Game.New()
--     timer:SetDuration(delay)

--     function timer:Action()
--         LaunchProjectile(hero, target_position)
--     end
-- end

-- ---Hero Ability Success Callback
-- ---Calls the Projectile Launch Function on Success
-- ---@param ctx EffectContext
-- local function OnSuccess(ctx)
--     local caster = ctx.caster
--     local player_id = DCEI.GetUnitPlayerId(caster)

--     ---@type Hero
--     local hero = _Heroes[player_id]

--     -- We need to get the Target and Force the Player to Rotate Towards it.
--     local target = ctx.target

--     local animation_delay = 0.15

--     -- Keep a record of the last known position of the Target in case it dies.
--     local target_position = Vector2.UnitPosition(target)

--     -- Stats
--     local count = hero:GetStat(STAT.ProjectileCount, REF.Ability)
--     local size = hero:GetStat(STAT.SkillSize, REF.Ability)
--     local range = hero:GetStat(STAT.SkillRange, REF.Ability)

--     -- Timer
--     local timer = Core.Timer.Game.New()
--     timer:SetDuration(animation_delay)

--     function timer:Tick()
--         if not hero:GetUnitAlive() then
--             self:Destroy()
--             return
--         end

--         if Help.ValidateSimpleUnit(target) then
--             target_position = Vector2.UnitPosition(target)
--         end
--     end

--     function timer:Action()
--         if Help.ValidateSimpleUnit(target) then
--             target_position = Vector2.UnitPosition(target)
--         end

--         local hero_position = hero:GetPosition()
--         target_position = hero_position + Vector2.Normalized(target_position - hero_position) * range

--         LaunchProjectile(hero, target_position)
--         for i = 1, count - 1 do
--             local random_offset = Vector2.RandomInside(math.sqrt(1 + size))
--             LaunchProjectileWithDelay(hero, target_position + random_offset, i * 0.1)
--         end
--     end
-- end

-- -- ================================================================================================
-- -- !SECTION -- Local Functions
-- -- SECTION -- Upgrade
-- -- ================================================================================================

-- ---@type _Upgrade
-- local Upgrade = {
--     Name = REF.Ability,
-- }

-- Upgrade.Cache = {
--     [STAT.AttackSpeed] = {},
--     [STAT.SkillRange] = {
--         EffectPath.New(REF.Scan, EJS.AreaSearch.Radius),
--         EffectPath.New(REF.ScanFallback, EJS.AreaSearch.Radius),
--     },
--     [STAT.SkillSize] = {
--         EffectPath.New(REF.ImpactVFX, EJS.Actor.Scale, nil, IMPACT_VFX_SCALE),
--     },
--     [STAT.Damage] = {
--         EffectPath.New(REF.Damage, EJS.Damage.Value),
--     },
-- }

-- -- ANCHOR: Override
-- -- Override occurs every time this weapon is modified
-- ---@param hero Hero
-- function Upgrade.Override(hero)
--     _Heroes[hero.player_id] = hero

--     -- Apply Projectile Speed Behavior
--     local projectile_speed = hero:GetStat(STAT.ProjectileSpeed, Upgrade.Name)
--     local projectile_speed_stacks = math.floor(projectile_speed * 100)
--     Core.Unit.SetBehaviorCount(hero.unit, REF.ProjectileSpeed, projectile_speed_stacks)

--     ---TEMP: Go ahead and Set the Frozen Axe as the Primary Weapon
--     ---Ideally, we have a better way to handle this.
--     DCEI.ApplyTag(hero.unit, REF.IsPrimaryWeapon, -1, 1)

--     -- Need to access the Cast Range of this Ability and set a Custom Property for the Top Detection Range.
--     local detection_range = hero:GetStat(STAT.SkillRange, Upgrade.Name)
--     hero:SetDetectionRange(detection_range)

--     -- Need to Register when this Ability is Cast and force the Top to play the Attack Animation
--     DCEI.TriggerAddEffectEvent(REF.Success, function()
--         Help.SendActorEvent(hero.top, "Attack")
--     end, true)
-- end

-- -- ================================================================================================
-- -- !SECTION -- Upgrade
-- -- SECTION -- Hookups
-- -- ================================================================================================

-- DCEI.TriggerAddEffectEvent(REF.Success, OnSuccess)
-- DCEI.TriggerAddUnitSpawnEvent(REF.ProjectileFilter, OnProjectileSpawn)

-- -- ================================================================================================
-- -- !SECTION -- Hookups
-- -- ================================================================================================

-- return Upgrade
