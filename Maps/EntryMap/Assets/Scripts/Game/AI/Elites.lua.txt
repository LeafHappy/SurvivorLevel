-- ================================================================================================
-- SECTION: Libraries
-- ================================================================================================

local Core = require("Core")
local GMUI = require("GMUI")

local SimpleUnit = require("Class/Simple/SimpleUnit")
local Vector2 = require("Class/Vector2")
local Attributes = require("Class/Attributes")

local SimpleUnits = require("SharedData/SimpleUnits")
local EJS = require("Data/EJS")

local Help = require("Help")

-- Script References
local TrainingDummy = require("Game/AI/Elites/TrainingDummy")
local Golem = require("Game/AI/Elites/Golem")
local Skull = require("Game/AI/Elites/Skull")
local Necromancer = require("Game/AI/Elites/Necromancer")
local Bloodstone = require("Game/AI/Elites/Bloodstone")
local Bramble = require("Game/AI/Elites/Bramble")
local Nightshade = require("Game/AI/Elites/Nightshade")

-- Final
local MadScientist = require("Game/AI/Elites/MadScientist")

-- Hybrid
local SkeletonMage = require("Game/AI/Elites/SkeletonMage")

-- ================================================================================================
-- !SECTION: Libraries
-- SECTION: Variables
-- ================================================================================================

---@class EliteData
---@field Name string
---@field Type string
---@field Stats table<Modifier>
---@field StaggerAnimation string
-- -@field Life number
-- -@field Radius number
-- -@field Speed number

---@class Elite
---@field Data EliteData
---@field StartAI function

local simple_collider = DCEI.SimpleUnit("Simple Collider")
local simple_unit_pusher = DCEI.Effect("Simple Unit Pusher")

-- Simple Unit
-- local elite_collider = SimpleUnit.New("Boss Collision Effects")
-- elite_collider:SetUnitType(simple_collider)
-- elite_collider:SetCollisionEffect(elite_on_stay, CollisionTiming.Start | CollisionTiming.Continue, 1)

-- ================================================================================================
-- !SECTION: Libraries
-- SECTION: Module Initialization
-- ================================================================================================

local Elites = {}

Elites.Types = {
    -- Testing
    TrainingDummy = TrainingDummy,

    -- Elites
    MadScientist = MadScientist,

    Golem = Golem,
    Skull = Skull,
    Necromancer = Necromancer,
    Bloodstone = Bloodstone,
    Bramble = Bramble,
    Nightshade = Nightshade,

    -- Hybrid
    SkeletonMage = SkeletonMage,
}

-- ================================================================================================
-- !SECTION: Module Initialization
-- SECTION: Module Functions
-- ================================================================================================

local function ApplySimpleUnitPusher(unit, radius)
    local pusher = SimpleUnit.New("Simple Unit Pusher")
    pusher:SetUnitType(simple_collider)
    pusher:SetCollision(CollisionLayers.None, CollisionLayers.Hostile, radius)
    pusher:SetCollisionEffect(simple_unit_pusher, CollisionTiming.Start | CollisionTiming.Continue, 0)
    pusher:Register()

    local position = Vector2.UnitPosition(unit)
    local instance = pusher:SpawnSyncStationary(PLAYER.Terrain, TEAM.Terrain, position)

    DCEI.AttachUnit(instance, unit, {})

    DCEI.TriggerAddUnitRemovedEvent(unit, function()
        DCEI.RemoveSimpleUnit(instance)
    end)
end

---Spawn an Elite.
---@param unit_type UnitType | string
---@param position Vector2
---@param modifiers table<Modifier>
function Elites.Spawn(unit_type, position, modifiers)
    local elite = Elites.Types[unit_type]

    DCEI.PlaySound(DCEI.Sound("call_wave_v1"))

    modifiers = modifiers or {}

    -- Setup Attributes
    local attributes = Attributes.New()

    -- Get Base Stats from Elite Data
    for _, modifier in ipairs(elite.Data.Stats) do
        attributes:Add(modifier)
    end

    -- Add Modifiers
    for _, modifier in ipairs(modifiers) do
        attributes:Add(modifier)
    end

    local facing = Vector2.Down()

    local elite_data = elite.Data

    local instance =
        DCEI.CreateUnit(TEAM.Hostile, PLAYER.Hostile, elite_data.Type, position.x, position.y, facing.x, facing.y)

    -- Collision Size: Collision, Shadow, Pusher
    local collision_size = attributes:Get(STAT.CollisionSize)
    SimpleUnit.ModifyCollision(instance, CollisionLayers.Hostile, CollisionLayers.Friendly, collision_size)
    SimpleUnits.Helpers.AttachComplexShadow(instance, collision_size)
    ApplySimpleUnitPusher(instance, collision_size)

    -- Health
    local health = attributes:Get(STAT.Health)
    SimpleUnit.ModifyHealth(instance, health)

    local message = string.format("[%s] Health: %d", elite_data.Name, math.floor(health))
    Help.Log(message)

    -- Tag
    DCEI.SetUnitSimpleTag(instance, { value = SIMPLE_TAG.Hostile })

    -- Attach Health Bar
    Elites.ApplyOverheadHealthbar(instance)

    -- Grant Move Speed Stacks
    local move_speed = attributes:Get(STAT.MoveSpeed)
    local move_speed_stacks = math.floor(move_speed * 100)
    DCEI.ApplyBehaviorToSelf(instance, DCEI.Behavior("Stats - Move Speed"), move_speed_stacks)

    -- Grant Cast Speed Stacks
    local cast_speed = attributes:Get(STAT.AttackSpeed)
    local cast_speed_stacks = math.floor(cast_speed * 100)
    DCEI.ApplyBehaviorToSelf(instance, DCEI.Behavior("Stats - Cast Speed"), cast_speed_stacks)

    -- Activate the AI
    elite_data.StartAI(instance, attributes)

    return instance
end

---Attach a Simple Collider.
---@param unit Unit
---@param radius number
---@param effect string
function Elites.AttachSimpleCollider(unit, radius, effect)
    local unit_type = DCEI.GetUnitType(unit)
    local position = Vector2.UnitPosition(unit)

    local collider = SimpleUnit.New(unit_type .. " - Collider")
    collider:SetUnitType(simple_collider)
    collider:SetCollisionEffect(effect, CollisionTiming.Start | CollisionTiming.Continue, 1)
    collider:SetCollision(CollisionLayers.None, CollisionLayers.Friendly, radius)

    local instance = collider:SpawnSyncStationary(PLAYER.Terrain, TEAM.Terrain, position)
    DCEI.AttachUnit(instance, unit, {})
    DCEI.TriggerAddUnitDiedEvent(unit, function()
        DCEI.RemoveSimpleUnit(instance)
    end)
end

-- ================================================================================================
-- !SECTION: Module Functions
-- SECTION: UI
-- ================================================================================================

---Generates a Health Bar above the Unit.
---@param unit Unit
function Elites.ApplyOverheadHealthbar(unit)
    local unit_ref = GMUI.CreateUnitReference(unit)
    Core.Event.SendPresentationEvent("StatusBarManager.NewEliteStatus", unit_ref)
end

---Generates an Onscreen Health Bar of the Unit.
---@param unit Unit
---@param label string
function Elites.ApplyOnScreenHealthBar(unit, label)
    local data = { unit_ref = GMUI.CreateUnitReference(unit), display_name = label }
    GMUI.SendUiLayoutCommand("ui.game", "HookupBossHealth", data)

    function HideBossUI()
        GMUI.SendUiLayoutCommand("ui.game.boss", "Hide")
    end

    DCEI.TriggerAddUnitDiedEvent(unit, HideBossUI, true)
    DCEI.TriggerAddUnitRemovedEvent(unit, HideBossUI, true)
end

---Generates an Offscreen Indicator of the Unit.
---@param unit Unit
---@param background_image string Texture
---@param background_color any Need to figure out how this works.
function Elites.ApplyOffscreenIndicator(unit, background_image, background_color)
    local data = { background_image = background_image, background_color = background_color }
    data.unit_ref = GMUI.CreateUnitReference(unit)

    -- generate new offscreen indicator
    Core.Event.SendPresentationEvent("NewOffscreenIndicator", data)

    local does_indicator_exist = true
    local function AttemptDestroyIndicator()
        if does_indicator_exist then
            Core.Event.SendPresentationEvent("DestroyOffscreenIndictor", data.unit_ref)
            does_indicator_exist = false
        end
    end

    -- Remove the indicator if the unit dies or is removed
    DCEI.TriggerAddUnitDiedEvent(unit, AttemptDestroyIndicator)
    DCEI.TriggerAddUnitRemovedEvent(unit, AttemptDestroyIndicator)
end

-- ================================================================================================
-- !SECTION: UI
-- ================================================================================================

return Elites
