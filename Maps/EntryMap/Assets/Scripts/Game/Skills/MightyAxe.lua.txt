-- ================================================================================================
-- SECTION -- About
-- ================================================================================================
--[[
    Description
]]
-- ================================================================================================
-- !SECTION -- About
-- SECTION -- Libraries
-- ================================================================================================

local Core = require("Core")
local EJS = require("Data/EJS")

local Vector2 = require("Class/Vector2")
local Vector3 = require("Class/Vector3")
local SimpleUnit = require("Class/Simple/SimpleUnit")

local Ease = require("Data/Ease")

local EffectPath = require("SharedData/Class/EffectPath")

local SkillData = require("SharedData/Skills/SkillData")

local Help = require("Help")

-- ================================================================================================
-- !SECTION -- Libraries
-- SECTION -- Local Variables
-- ================================================================================================

local REF = {
    -- Ability
    Ability = DCEI.Ability("Skill - Mighty Axe"),

    -- Tags
    IsPrimaryWeapon = DCEI.Tag("Skill - Mighty Axe - IsPrimaryWeapon"),

    -- Activation Effects
    ScanHostile = DCEI.Effect("Skill - Mighty Axe - Scan - Hostile"),
    ScanAll = DCEI.Effect("Skill - Mighty Axe - Scan - All"),
    Success = DCEI.Effect("Skill - Mighty Axe - Success"),

    -- Cast Effects
    Launch = DCEI.Effect("Skill - Mighty Axe - Launch"),

    -- Collision Effects
    OnEnter = DCEI.Effect("Skill - Mighty Axe - OnEnter"),
    Stagger = DCEI.Effect("Skill - Mighty Axe - Stagger"),

    Damage = DCEI.Effect("Skill - Mighty Axe - Damage"),

    -- VFX
    ImapctVFX = DCEI.Effect("Skill - Mighty Axe - Impact VFX"),
    DeathVFX = DCEI.Effect("Skill - Mighty Axe - Death VFX"),

    -- Behaviors
    ProjectileSpeed = DCEI.Behavior("Skill - Mighty Axe - Projectile Speed"),

    -- Units
    Projectile = DCEI.Unit("Skill - Mighty Axe - Projectile"),

    -- Filter
    ProjectileFilter = DCEI.CreateUnitFilter({ name = DCEI.Unit("Skill - Mighty Axe - Projectile") }),
}

---@type table<number, Hero>
local _Heroes = {}

---@type table<number, SimpleUnit>
local _SimpleUnits = {}

local MODEL_SCALE = 0.50
local IMPACT_VFX_SCALE = 0.40
local ANIMATION_DELAY = 0.15

-- ================================================================================================
-- !SECTION -- Local Variables
-- SECTION -- Local Functions
-- ================================================================================================

local function OnProjectileSpawn()
    local projectile = DCEI.TriggeringUnit

    local player_id = DCEI.GetUnitPlayerId(projectile)
    local hero = _Heroes[player_id]

    local tags = hero:GetInheritedTags(SkillData.MightyAxe.Key)

    local size = hero:GetStat(STAT.SkillSize, tags)
    Help.SetModelScale(projectile, size * MODEL_SCALE, 0.10, Ease.OutCubic)

    SimpleUnit.ModifyCollision(projectile, CollisionLayers.None, CollisionLayers.Hostile, size)

    local collision_effects = {
        SimpleUnit.GenerateCollisionEffect(REF.OnEnter, CollisionTiming.Start | CollisionTiming.Continue, 1),

        -- If we want to do Tag-Specific Effects.
        -- SimpleUnit.GenerateCollisionEffect(REF.OnEnter, CollisionTiming.Start, 1, SIMPLE_TAG.Hostile),
        -- SimpleUnit.GenerateCollisionEffect(REF.OnEnterProp, CollisionTiming.Start, 1, SIMPLE_TAG.Prop),
    }

    SimpleUnit.ModifyCollisionEffects(projectile, collision_effects)
end

---comment
---@param hero Hero
---@param target_position Vector2
local function LaunchProjectile(hero, target_position)
    if not Help.ValidateUnit(hero.unit) then
        return
    end

    DCEI.CreateEffectAtPosition(REF.Launch, hero.unit, target_position.x, target_position.y)
end

---comment
---@param hero Hero
---@param target_position Vector2
---@param delay number
local function LaunchProjectileWithDelay(hero, target_position, delay)
    local timer = Core.Timer.Game.New()
    timer:SetDuration(delay)

    function timer:Action()
        LaunchProjectile(hero, target_position)
    end
end

---comment
---@param ctx EffectContext
local function OnSuccess(ctx)
    local player_id = DCEI.GetUnitPlayerId(ctx.caster)

    ---@type Hero
    local hero = _Heroes[player_id]

    -- Stats
    local tags = hero:GetInheritedTags(SkillData.MightyAxe.Key)
    local count = hero:GetStat(STAT.ProjectileCount, tags)
    local size = hero:GetStat(STAT.SkillSize, tags)
    local range = hero:GetStat(STAT.SkillRange, tags)

    hero:AttackTargetCallback(
        ctx.target,
        ANIMATION_DELAY,
        ---@param target_position Vector2
        function(target_position)
            if not Help.ValidateUnit(hero.unit) then
                return
            end

            local hero_position = hero:GetPosition()
            local launch_position = hero_position + Vector2.Normalized(target_position - hero_position) * range

            -- First Projectile always at the Target Position
            LaunchProjectile(hero, launch_position)

            -- Additional Projectiles
            for i = 1, count - 1 do
                local random_offset = Vector2.RandomInside(math.sqrt(1 + size))
                LaunchProjectileWithDelay(hero, launch_position + random_offset, i * 0.1)
            end
        end
    )
end

---comment
---@param hero Hero
local function UnsubscribeFromHeroEvents(hero)
    -- Unsubscribe from Hero Events
    hero.OnRemoveEvent:Unsubscribe(UnsubscribeFromHeroEvents)

    _Heroes[hero.player_id] = nil
end

-- ================================================================================================
-- !SECTION -- Local Functions
-- SECTION -- Upgrade
-- ================================================================================================

---@type _SkillData
local Upgrade = {
    Name = REF.Ability,
}

Upgrade.Cache = {
    [STAT.AttackSpeed] = {},
    [STAT.SkillRange] = {
        EffectPath.New(REF.ScanHostile, EJS.AreaSearch.Radius),
        EffectPath.New(REF.ScanAll, EJS.AreaSearch.Radius),
    },
    [STAT.SkillSize] = {
        EffectPath.New(REF.ImapctVFX, EJS.Actor.Scale, nil, IMPACT_VFX_SCALE),
        EffectPath.New(REF.DeathVFX, EJS.Actor.Scale, { SKILL_TAG.MightyAxeFrostAxe }, IMPACT_VFX_SCALE),
    },
    [STAT.Damage] = {
        EffectPath.New(REF.Damage, EJS.Damage.Value),
    },
    [STAT.CriticalChance] = {
        EffectPath.New(REF.Damage, EJS.Damage.CriticalChance),
    },
    [STAT.CriticalMultiplier] = {
        EffectPath.New(REF.Damage, EJS.Damage.CriticalMultiplier),
    },
    [STAT.Stagger] = {
        EffectPath.New(REF.Stagger, EJS.ApplyBehavior.Count),
    },
}

-- ANCHOR: Override
-- Override occurs every time this weapon is modified
---@param hero Hero
function Upgrade.Override(hero)
    -- Initialize Skill for Player
    if not _Heroes[hero.player_id] then
        _Heroes[hero.player_id] = hero

        -- Hookup Update Loop
        hero.OnRemoveEvent:Subscribe(UnsubscribeFromHeroEvents)
    end

    local tags = hero:GetInheritedTags(SkillData.MightyAxe.Key)

    -- Apply Projectile Speed Behavior
    local projectile_speed = hero:GetStat(STAT.ProjectileSpeed, tags)
    local projectile_speed_stacks = math.floor(projectile_speed * 100)
    Core.Unit.SetBehaviorCount(hero.unit, REF.ProjectileSpeed, projectile_speed_stacks)

    DCEI.ApplyTag(hero.unit, REF.IsPrimaryWeapon, -1, 1)

    -- Need to access the Cast Range of this Ability and set a Custom Property for the Top Detection Range.
    local detection_range = hero:GetStat(STAT.SkillRange, tags)
    hero:SetDetectionRange(detection_range)

    -- Need to Register when this Ability is Cast and force the Top to play the Attack Animation
    DCEI.TriggerAddEffectEvent(REF.Success, function()
        Help.SendActorEvent(hero.top, "Attack")
    end, true)
end

-- ================================================================================================
-- !SECTION -- Upgrade
-- SECTION -- Hookups
-- ================================================================================================

DCEI.TriggerAddEffectEvent(REF.Success, OnSuccess)
DCEI.TriggerAddUnitSpawnEvent(REF.ProjectileFilter, OnProjectileSpawn)

-- ================================================================================================
-- !SECTION -- Hookups
-- ================================================================================================

return Upgrade
