-- ================================================================================================
-- SECTION -- About
-- ================================================================================================
--[[
    Description
]]
-- ================================================================================================
-- !SECTION -- About
-- SECTION -- Libraries
-- ================================================================================================

local Core = require("Core")
local EJS = require("Data/EJS")

local Vector2 = require("Class/Vector2")
local Vector3 = require("Class/Vector3")
local SimpleUnit = require("Class/Simple/SimpleUnit")

local Ease = require("Data/Ease")

local EffectPath = require("SharedData/Class/EffectPath")

local SkillData = require("SharedData/Skills/SkillData")

local Help = require("Help")

-- ================================================================================================
-- !SECTION -- Libraries
-- SECTION -- Local Variables
-- ================================================================================================

local REF = {
    -- Ability
    Ability = DCEI.Ability("Skill - Guardian Shield"),

    -- Effects
    Scan = DCEI.Effect("Skill - Guardian Shield - Scan"),
    Trigger = DCEI.Effect("Skill - Guardian Shield - Trigger"),
    OnEnter = DCEI.Effect("Skill - Guardian Shield - OnEnter"),
    Damage = DCEI.Effect("Skill - Guardian Shield - Damage"),
    Slow = DCEI.Effect("Skill - Guardian Shield - Slow"),
    Stagger = DCEI.Effect("Skill - Guardian Shield - Stagger"),

    -- Unit
    Projectile = DCEI.Unit("Skill - Guardian Shield - Projectile"),
}

---@type table<PLAYER, Hero>
local _Heroes = {}

---@class GuardianShieldProjectileData
---@field instance_id string
---@field player_id PLAYER
---@field instance Unit
---@field radius number
---@field angle number
---@field speed number
---@field duration number

---@type table<PLAYER, GuardianShieldProjectileData>
local _Projectiles = {}

-- local SPAWN_OFFSET_DISTANCE = 0.50
local MODEL_SCALE = 0.60
local MODEL_SCALE_TIME = 0.25
local ROTATION_SPEED_FACTOR = 10

-- ================================================================================================
-- !SECTION -- Local Variables
-- SECTION -- Local Functions
-- ================================================================================================

---comment
---@param data GuardianShieldProjectileData
local function OnProjectileDeath(data)
    _Projectiles[data.player_id][data.instance_id] = nil
end

---comment
---@param hero Hero
---@param angle number
local function SpawnProjectile(hero, radius, angle)
    local hero_position = hero:GetPosition()
    local spawn_offset = Vector2.NewFromAngle(angle) * radius
    local spawn_position = hero_position + spawn_offset

    local instance = DCEI.CreateUnit(TEAM.Friendly, hero.player_id, REF.Projectile, spawn_position.x, spawn_position.y)

    -- Tags
    local tags = hero:GetInheritedTags(SKILL_TAG.GuardianShield)

    -- Get Stats
    local size = hero:GetStat(STAT.SkillSize, tags)
    local health = hero:GetStat(STAT.ProjectileHealth, tags)

    -- Model Scale
    Help.SetModelScale(instance, size * MODEL_SCALE, MODEL_SCALE_TIME)

    -- Collision Size
    local collision_layers = CollisionLayers.None
    SimpleUnit.ModifyCollision(instance, collision_layers, CollisionLayers.Hostile, size)

    -- Can set to CollisionLayers.Collector to pickup Experience.

    -- Collision Effects
    local speed = hero:GetStat(STAT.ProjectileSpeed, tags) * ROTATION_SPEED_FACTOR

    local collision_effects = {
        SimpleUnit.GenerateCollisionEffect(REF.OnEnter, CollisionTiming.Start, 0),
    }
    SimpleUnit.ModifyCollisionEffects(instance, collision_effects)

    -- Projectile Health
    SimpleUnit.ModifyHealth(instance, health)
    SimpleUnit.ModifyArmor(instance, ARMOR_TYPES.Invulnerable)

    -- Setup Projectile Data
    local instance_id = Core.Unit.GetId(instance)

    local duration = hero:GetStat(STAT.SkillDuration, tags)

    -- Insert into Projectile Table
    _Projectiles[hero.player_id][instance_id] = {
        instance_id = instance_id,
        player_id = hero.player_id,
        instance = instance,
        radius = radius,
        angle = angle,
        speed = speed,
        duration = duration,
    }

    -- SimpleUnit.ModifyTag(instance, SIMPLE_TAG.Hero)

    -- Subscribe to Death Event
    DCEI.TriggerAddUnitDiedEvent(instance, function()
        OnProjectileDeath(_Projectiles[hero.player_id][instance_id])
    end, true)

    return instance
end

---comment
---@param ctx EffectContext
local function OnTrigger(ctx)
    local player_id = DCEI.GetUnitPlayerId(ctx.caster)

    ---@type Hero
    local hero = _Heroes[player_id]

    -- local hero_position = hero:GetPosition()

    -- Tags
    local tags = hero:GetInheritedTags(SKILL_TAG.GuardianShield)

    -- Get Stats
    local count = hero:GetStat(STAT.ProjectileCount, tags)
    local cast_range = hero:GetStat(STAT.CastRange, tags)
    -- local radius = hero:GetStat(STAT.SkillRange, tags)

    local starting_angle = Help.RandomNumber(0, 360)

    -- Spawn Count
    for i = 1, count do
        local angle = starting_angle + (360 / count) * i

        SpawnProjectile(hero, cast_range, angle)
    end
end

local function UpdateProjectile(data)
    --
    data.duration = data.duration - TICK_RATE

    if data.duration <= 0 then
        DCEI.KillUnit(data.instance)
        return
    end

    -- Get next position
    data.angle = data.angle - data.speed * TICK_RATE
    local offset = Vector2.NewFromAngle(data.angle) * data.radius

    local hero_position = Vector2.UnitPosition(_Heroes[data.player_id].unit)
    local move_position = hero_position + offset

    -- Move the Projectile
    DCEI.SetUnitPosition2DWithInterpolation(data.instance, move_position.x, move_position.y)
end

---comment
---@param hero Hero
local function HeroUpdateLoop(hero)
    local hero_alive = hero and Help.ValidateUnit(hero.unit)

    -- Move all of my projectiles
    local projectiles = _Projectiles[hero.player_id]

    for _, projectile_data in pairs(projectiles) do
        if not hero_alive then
            DCEI.KillUnit(projectile_data.instance)
        else
            UpdateProjectile(projectile_data)
        end
    end
end

local function UnsubscribeFromHeroEvents(hero)
    -- Cleanup Projectiles
    local projectiles = _Projectiles[hero.player_id]

    if projectiles then
        for _, projectile_data in pairs(_Projectiles[hero.player_id]) do
            DCEI.KillUnit(projectile_data.instance)
        end
    end

    -- Unsubscribe from Hero Events
    hero.OnUpdateEvent:Unsubscribe(HeroUpdateLoop)
    hero.OnRemoveEvent:Unsubscribe(UnsubscribeFromHeroEvents)

    -- Clear Initialized Data
    _Heroes[hero.player_id] = nil
    _Projectiles[hero.player_id] = nil
end

-- ================================================================================================
-- !SECTION -- Local Functions
-- SECTION -- Upgrade
-- ================================================================================================

---@type _SkillData
local Upgrade = {
    Name = REF.Ability,
}

Upgrade.Cache = {
    [STAT.CastRange] = {
        EffectPath.New(REF.Scan, EJS.AreaSearch.Radius),
    },
    [STAT.Damage] = {
        EffectPath.New(REF.Damage, EJS.Damage.Value),
    },
    [STAT.CriticalChance] = {
        EffectPath.New(REF.Damage, EJS.Damage.CriticalChance),
    },
    [STAT.CriticalMultiplier] = {
        EffectPath.New(REF.Damage, EJS.Damage.CriticalMultiplier),
    },
    [STAT.SlowEffectiveness] = {
        EffectPath.New(REF.Slow, EJS.Slow.Unified, nil, -1),
    },
    [STAT.SlowDuration] = {
        EffectPath.New(REF.Slow, EJS.Slow.Duration),
    },
    [STAT.Stagger] = {
        EffectPath.New(REF.Stagger, EJS.ApplyBehavior.Count),
    },
}

-- ANCHOR: Override
-- Override occurs every time this weapon is modified
---@param hero Hero
function Upgrade.Override(hero)
    -- Initialize Skill for Player
    if not _Heroes[hero.player_id] then
        -- Initialize Hero Data
        _Heroes[hero.player_id] = hero
        _Projectiles[hero.player_id] = {}

        -- Hookup Hero Events
        hero.OnUpdateEvent:Subscribe(HeroUpdateLoop)
        hero.OnRemoveEvent:Subscribe(UnsubscribeFromHeroEvents)
    end
end

-- ================================================================================================
-- !SECTION -- Upgrade
-- SECTION -- Hookups
-- ================================================================================================

DCEI.TriggerAddEffectEvent(REF.Trigger, OnTrigger, true)

-- ================================================================================================
-- !SECTION -- Hookups
-- ================================================================================================

return Upgrade
