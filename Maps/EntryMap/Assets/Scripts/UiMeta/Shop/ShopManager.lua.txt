---============================================================================
---SECTION: Libraries
---============================================================================

local Core = require("Core:Presentation")
local GMUI = require("GMUI:Presentation")
local Shop = require("DFShop:Presentation")

---============================================================================
---!SECTION: Libraries
---SECTION: Scripts
---============================================================================

-- SCRIPTS
local ShopIapData = require("UiMeta/Shop/ShopIapData")
local CurrencyData = require("UiMeta/Shop/CurrencyData")
local ShopSectionData = require("UiMeta/Shop/ShopSectionData")
local SHOP_PRODUCT_ID = require("UiMeta/Shop/ShopProductID")
local DataManager = require("UiMeta/DataManager")
local SectionCustomCallbacks = require("UiMeta/Shop/SectionCustomCallbacks")
local DailyShopItemsData = require("UiMeta/Shop/DailyShopItemsData")
local ResourceDisplay = require("UiCamp/ResourceDisplay")
local ui = GMUI.ui

---============================================================================
---!SECTION: Scripts
---SECTION: Variables
---============================================================================

-- MODULE
local ShopManager = {}

-- VARIABLES
local default_layout_height = 290

local function PurchaseDailyShopItem(product_id)
    local item_data = Shop.GetProductFromID(product_id)
    if not item_data then
        return
    end
    local index = item_data.custom.index
    local saved_item = DataManager.GetDailyShopItem(index)
    local item_type = saved_item.type
    local item_level = saved_item.level
    local lookup_type = item_type:sub(1, 2) == "s_" and "shards" or item_type

    local shop_item_data = DailyShopItemsData[lookup_type][item_level]
    DataManager.AddInventoryResource(item_type, shop_item_data.amount, true)
    DataManager.Save()
end

local custom_price_IAP_purchase_cost_callbacks = {
    gems = function(cost)
        local currency_type = "gems"

        -- Set animation flag and value
        local old_value = DataManager.GetInventoryItem(currency_type)
        ResourceDisplay.SetStartAnimationValue(currency_type, old_value)

        -- Update
        DataManager.AddInventoryResource(currency_type, -cost, true)
        ResourceDisplay.UpdateBar(currency_type)
    end,
    gold = function(cost)
        local currency_type = "gold"

        -- Set animation flag and value
        local old_value = DataManager.GetGold()
        ResourceDisplay.SetStartAnimationValue(currency_type, old_value)

        -- Update
        DataManager.AddGold(-cost)
        ResourceDisplay.UpdateBar(currency_type)
    end,
}

local function GetDailyShopItemCost(product_id)
    local item_data = Shop.GetProductFromID(product_id)
    if not item_data then
        return
    end
    local index = item_data.custom.index
    local saved_item = DataManager.GetDailyShopItem(index)
    local item_type = saved_item.type
    local lookup_type = item_type:sub(1, 2) == "s_" and "shards" or item_type
    local item_level = saved_item.level
    local shop_item_data = DailyShopItemsData[lookup_type][item_level]
    return { type = shop_item_data.cost_type, amount = shop_item_data.cost_amount }
end

local product_id_purchase_callbacks = {
    [SHOP_PRODUCT_ID.SHOP_DAILY_01] = PurchaseDailyShopItem,
    [SHOP_PRODUCT_ID.SHOP_DAILY_02] = PurchaseDailyShopItem,
    [SHOP_PRODUCT_ID.SHOP_DAILY_03] = PurchaseDailyShopItem,
}

local product_id_custom_price = {
    [SHOP_PRODUCT_ID.SHOP_DAILY_01] = GetDailyShopItemCost,
    [SHOP_PRODUCT_ID.SHOP_DAILY_02] = GetDailyShopItemCost,
    [SHOP_PRODUCT_ID.SHOP_DAILY_03] = GetDailyShopItemCost,
}

local add_resource_callbacks = {
    gems = function(value)
        local currency_type = "gems"

        -- Set animation flag and value
        local old_value = DataManager.GetInventoryItem(currency_type)
        ResourceDisplay.SetStartAnimationValue(currency_type, old_value)

        DataManager.AddInventoryResource(currency_type, value, true)
        DataManager.Save()
        ResourceDisplay.UpdateBar(currency_type)
    end,
    gold = function(value)
        local currency_type = "gold"

        -- Set animation flag and value
        local old_value = DataManager.GetGold()
        ResourceDisplay.SetStartAnimationValue(currency_type, old_value)
        DCEI.PlaySound(DCEI.Sound("smh_coin_land"))
        DataManager.AddGold(value)
        DataManager.Save()
        ResourceDisplay.UpdateBar(currency_type)
    end,
    chest = function(value)
        local chest_type = {
            "c_common",
            "c_rare",
            "c_legendary",
        }
        DataManager.AddInventoryResource(chest_type[value], 1, true)
        DataManager.Save()
    end,
}

---============================================================================
---!SECTION: Variables
---SECTION: Local Functions
---============================================================================

local function ShopInitializeFinishCallback(success) end

local function PurchaseSuccessCallback(product_id)
    local item_data = Shop.GetProductFromID(product_id)
    if not item_data then
        DCEI.LogError("> PurchaseSuccess: item_data not found for " .. product_id)
        return
    end
    local price = item_data:GetPriceData().usd or 0
    local items = item_data:GetItemsData()
    DCEI.LogMessage("> purchased [" .. product_id .. "] " .. " for " .. string.format("%.2f", price))
    local custom_price_data = Shop.GetProductCustomPriceData(product_id)
    local get_product_id_cost = product_id_custom_price[product_id]
    if get_product_id_cost then
        custom_price_data = get_product_id_cost(product_id)
    end
    if custom_price_data then
        local cost = custom_price_data.amount
        local cost_type = custom_price_data.type
        local callback = custom_price_IAP_purchase_cost_callbacks[cost_type]
        if callback then
            callback(cost)
        end
    end
    local product_id_callback = product_id_purchase_callbacks[product_id]
    if product_id_callback then
        product_id_callback(product_id)
    else
        for type, amount in pairs(items) do
            local callback = add_resource_callbacks[type]
            if callback then
                callback(amount)
            else
                DCEI.LogError("No callback for " .. type)
            end
        end
    end

    DataManager.Save()
end

local function CreateShopUI()
    ShopManager.layout = Shop.CreateUI(ui.z3.Lower)
    ShopManager.layout.state.active = false

    -- Needs color to block input, block input to keep from being able to hit navigation buttons behind shop
    DCEI.SetFrameImageColor(ShopManager.layout.Frame, "#00000000")
    DCEI.SetFrameBlockInput(ShopManager.layout.Frame, true)

    function ShopManager.layout:OnHide()
        Shop.Close()

        if ShopManager.return_authority then
            GMUI.RunSimulationCallback(ShopManager.return_authority)
        end
    end

    DCEI.SetOnClickCallback(ShopManager.layout.CloseButton, function()
        DCEI.PlaySound(DCEI.Sound("smh_click_start"))
        ShopManager.layout:OnHide()
    end)
end

---@param callback function
local function GiveAuthority(data, callback)
    ShopManager.return_authority = callback
    ShopManager.Open(data.scroll_to_section)
end

---============================================================================
---!SECTION: Local Functions
---SECTION: Methods
---============================================================================

function ShopManager.AttemptPurchase(product_id)
    DCEI.LogMessage("> Attempt Purchase " .. tostring(product_id))

    local custom_price_data = Shop.GetProductCustomPriceData(product_id)
    local get_product_id_cost = product_id_custom_price[product_id]
    if get_product_id_cost then
        custom_price_data = get_product_id_cost(product_id)
    end
    if custom_price_data then
        -- check if enough items in inventory to purchase good
        local cost = custom_price_data.amount
        if custom_price_data.type == "gems" then
            if DataManager.GetInventoryItem("gems") < cost then
                DCEI.PlaySound(DCEI.Sound("smh_not_enough_coin"))
                DCEI.ShowFeedbackMessage("Not Enough Gems!")
                return
            end
        elseif custom_price_data.type == "gold" then
            if DataManager.GetGold() < cost then
                DCEI.PlaySound(DCEI.Sound("smh_not_enough_coin"))
                DCEI.ShowFeedbackMessage("Not Enough Gold!")
                return
            end
        end

        Shop.OnAnyItemPurchase(product_id)
    elseif DCEI.Platform == "WindowsPlayer" then
        -- simulate successful purchase when using editor
        Shop.OnAnyItemPurchase(product_id)
    else
        -- otherwise continue standard IAP flow
        -- Shop mod will hanlde DCEI.PurchaseIapProduct in simulation layer
        -- note: it takes a few seconds to execute and thus acts similarly to a DCEI.Wait() so avoid subsequent code in the same thread
        Shop.DCEIPurchase(product_id)
    end
end

function ShopManager.Initialize(server)
    Shop.Initialize(
        ShopIapData,
        CurrencyData,
        ShopSectionData,
        default_layout_height,
        ShopManager.AttemptPurchase,
        PurchaseSuccessCallback,
        ShopInitializeFinishCallback,
        server.GetServerTime
    )

    -- Wait for other ui to initialize before creating ui to avoid scroll errors
    DCEI.WaitForUiUpdateToComplete(function()
        CreateShopUI()
    end)

    server.AddOnGetServerTimeCallback(function()
        local server_time = server.GetServerTime()
        DCEI.LogWarning("Server time fetched! " .. server_time)

        local daily_section_layout = Shop.GetSectionLayout("daily")
        if daily_section_layout then
            DCEI.DestroyFrame(daily_section_layout.OfflineText)
            daily_section_layout.state.display_adbutton = true
        end

        local day_length = 86400
        local shop_age_in_seconds = server_time - EPOCH_START
        local shop_age_day = math.floor(shop_age_in_seconds / day_length)
        local timestamp_next_refresh = (shop_age_day + 1) * day_length + EPOCH_START

        -- timer has elapsed, refresh daily shop items
        local prev_rotation_time = DataManager.GetShopNextRotation()

        if not prev_rotation_time then
            prev_rotation_time = 0
        end

        if timestamp_next_refresh > prev_rotation_time then
            SectionCustomCallbacks.OnShopNewDay(timestamp_next_refresh)
        end
        SectionCustomCallbacks.AddDailySectionTimer(server, timestamp_next_refresh)
    end)
end

function ShopManager.Open(scroll_to_section)
    DCEI.WaitForUiUpdateToComplete(function()
        if ShopManager.layout.state.active == false then
            Shop.Open()
        end

        if scroll_to_section then
            Shop.ScrollToSection(scroll_to_section)
        end
    end)
end

---============================================================================
---!SECTION: Methods
---SECTION: Events
---============================================================================

Core.Event.RegisterPresentationEvent("Camp.Shop", GiveAuthority)
Core.Event.RegisterPresentationEvent("Camp.OpenShop", ShopManager.Open)

---============================================================================
---!SECTION: Events
---============================================================================

return ShopManager
