---============================================================================
---SECTION: About
---============================================================================
--[[
    About Class
]]
---============================================================================
---!SECTION: About
---SECTION: Libraries
---============================================================================

local Vector2 = require("Class/Vector2")
local Help = require("Help")
local _Dev = require("_Dev")

---============================================================================
---!SECTION: Libraries
---SECTION: Local Variables
---============================================================================

---ANCHOR: Customizable Properties
local default_angle = 0
local default_pitch = 45
local default_distance = 8
local default_transition_time = 0.3

local TICK_RATE = TICK_RATE or 0.0625
local MIN_ORTHOGRAPHIC_SIZE = 1
local MAX_ORTHOGRAPHIC_SIZE = 1000

---ANCHOR: Internal
local _Cameras = {}

---============================================================================
---!SECTION: Local Variables
---SECTION: Local Functions
---============================================================================

-- Camera Min/Max Orthographic Size
DCEI.SetCameraMinOrthographicSize(MIN_ORTHOGRAPHIC_SIZE)
DCEI.SetCameraMaxOrthographicSize(MAX_ORTHOGRAPHIC_SIZE)

---============================================================================
---!SECTION: Local Functions
---SECTION: Class Initialization
---============================================================================

---@class Camera
---@field player_id number
---@field angle number
---@field pitch number
---@field distance number
---@field transition_time number
---@field tracker UnitInstance
---@field tracked_targets table<UnitInstance>
---@field tracked_positions table<Vector2>
---@field offset Vector2
---@field horizonal_limit Vector2 | nil
---@field vertical_limit Vector2 | nil
local Camera = {}
Camera.__index = Camera

---Create a Camera Instance.
---@param player_id number
---@return Camera
function Camera.New(player_id)
    local self = setmetatable({}, Camera)
    self.is_active = true

    self.player_id = player_id
    _Cameras[self.player_id] = self

    self.angle = default_angle
    self.pitch = default_pitch
    self.distance = default_distance
    self.transition_time = default_transition_time

    self.tracker = Help.CreateDummyUnit()
    DCEI.SetCameraFocusUnitForPlayer(self.player_id, self.tracker, self.transition_time)

    self.tracked_targets = {}
    self.tracked_positions = {}
    self.offset = Vector2.Zero()

    self.horizonal_limit = nil
    self.vertical_limit = nil

    self.position = Vector2.Zero()

    self:SetPitch()
    self:SetAngle()

    DCEI.SetEnabledCameraClamp(false)

    return self
end

---============================================================================
---!SECTION: Class Initialization
---SECTION: Class Internal
---============================================================================

---============================================================================
---!SECTION: Class Internal
---SECTION: Class Getters
---============================================================================

---Returns the Camera's World Position.
---@return Vector2
function Camera:GetPosition()
    return self.position
    -- return Vector2.NewFromTable(DCEI.GetCameraCurrentFocalPoint())
end

---Returns the Camera's Size.
---@return number
function Camera:GetSize()
    return DCEI.GetCameraOrthographicSize()
end

---Returns the Camera's Aspect Ratio.
---NOTE: This is just an estimate.
---@return Vector2
function Camera:GetAspectRatio()
    return Vector2.New(1.2, 1.6) -- Estimate
end

---Returns the Camera's Dimensions.
---NOTE: This is just an estimate.
---@return Vector2
function Camera:GetDimensions()
    return self:GetAspectRatio() * self:GetSize()
end

---Returns the Camera Bounds.
---NOTE: This is just an estimate.
---@return table table {min, max}
function Camera:GetWorldSpaceBounds()
    local camera_position = self:GetPosition()
    local camera_dimensions = self:GetDimensions()

    return {
        min = camera_position - camera_dimensions / 2,
        max = camera_position + camera_dimensions / 2,
    }
end

---Returns the Distance to the Camera Corner.
---NOTE: This is just an estimate.
---@return number
function Camera:GetCornerDistance()
    local dimensions = self:GetDimensions()
    return math.sqrt(dimensions.x * dimensions.x + dimensions.y * dimensions.y)
end

function Camera:SetFollowUnit(unit)
    if unit then
        self.tracked_targets = {}
        self.tracked_targets[unit] = unit
    end
end

function Camera:AddFollowUnit(unit)
    if not self.tracked_targets[unit] then
        self.tracked_targets[unit] = unit
    end
end

function Camera:RemoveFollowUnit(unit)
    if self.tracked_targets[unit] then
        self.tracked_targets[unit] = nil
    end
end

function Camera:ClearFollowUnits()
    self.tracked_targets = {}
end

---============================================================================
---!SECTION: Class Getters
---SECTION: Class Setters
---============================================================================

---Sets the Camera's target offset.
---@param offset Vector2
function Camera:SetOffset(offset)
    self.offset = offset
end

---Sets this Player's Camera to the given angle.
---@param pitch number | nil Default: default_pitch (45)
---@param duration number | nil Default: 0
---@param use_real_time boolean | nil Default: false
function Camera:SetPitch(pitch, duration, use_real_time)
    self.pitch = pitch or default_pitch
    duration = duration or 0
    use_real_time = use_real_time or false

    self.pitch = 45

    DCEI.SetCameraPitchSmoothOvertimeForPlayer(self.player_id, self.pitch, duration, use_real_time)
end

---Sets this Player's Camera to the given Angle.
---@param angle number | nil Default: default_angle (45)
---@param duration number | nil Default: 0
---@param use_real_time boolean | nil Default: false
function Camera:SetAngle(angle, duration, use_real_time)
    self.angle = angle or default_angle
    duration = duration or 0
    use_real_time = use_real_time or false

    DCEI.SetCameraYawSmoothOvertimeForPlayer(self.player_id, self.angle, duration, use_real_time)
end

---Sets the Camera's distance.
---@param distance number
---@param transition_time number | nil
---@param use_real_time boolean | nil
function Camera:SetSize(distance, transition_time, use_real_time)
    self.distance = distance
    transition_time = transition_time or self.transition_time
    use_real_time = use_real_time or false

    self.distance = distance
    DCEI.SetCameraOrthographicSize(self.distance, transition_time, use_real_time)
end

---Adds the distance to the current Camera's distance.
---@param distance number
---@param transition_time number | nil
---@param use_real_time boolean | nil
function Camera:ModifySize(distance, transition_time, use_real_time)
    self:SetSize(self.distance + distance, transition_time, use_real_time)
end

---comment
---@param limit Vector2 | nil
function Camera:SetHorizonalLimit(limit)
    self.horizonal_limit = limit
end

---comment
---@param limit Vector2 | nil
function Camera:SetVerticalLimit(limit)
    self.vertical_limit = limit
end

---comment
---@param position Vector2
function Camera:SetPosition(position)
    self.position = position
end

---============================================================================
---!SECTION: Class Setters
---SECTION: Class Functions
---============================================================================

---Returns whether the provided position in in view of the Camera.
---@param position Vector2
---@return boolean
function Camera:IsPositionInView(position)
    local bounds = self:GetWorldSpaceBounds()

    return position.x >= bounds.min.x
        and position.x <= bounds.max.x
        and position.y >= bounds.min.y
        and position.y <= bounds.max.y
end

function Camera:Update()
    if not self.is_active then
        return
    end

    if not self.tracker then
        return
    end

    local position = Vector2.UnitPosition(self.tracker)

    -- Get the Centroid of Followed Targets
    local unit_positions = {}
    for key, value in pairs(self.tracked_targets) do
        if Help.ValidateUnit(value) then
            table.insert(unit_positions, Vector2.UnitPosition(value))
        else
            self.tracked_targets[key] = nil
        end
    end

    local centroid = Vector2.Zero()
    if #unit_positions == 0 then
        centroid = position
    else
        centroid = Vector2.Centroid(unit_positions)
    end

    -- Update Camera Position
    local target_position = centroid + self.offset
    if self.horizonal_limit then
        target_position.x = Help.Clamp(target_position.x, self.horizonal_limit.x, self.horizonal_limit.y)
    end
    if self.vertical_limit then
        target_position.y = Help.Clamp(target_position.y, self.vertical_limit.x, self.vertical_limit.y)
    end

    local new_position = Vector2.Damp(position, target_position, 10, TICK_RATE)
    DCEI.SetUnitPosition2DWithInterpolation(self.tracker, new_position.x, new_position.y)
    self.position = new_position
end

function Camera:SetActive(status)
    self.is_active = status
end

---============================================================================
---!SECTION: Class Functions
---SECTION: Class Library
---============================================================================

---Allows you to access the specific player's Camera
---@param player_id integer
---@return Camera
function Camera.Fetch(player_id)
    if not _Cameras[player_id] then
        return Camera.New(player_id)
    else
        return _Cameras[player_id]
    end
end

---============================================================================
---!SECTION: Class Library
---SECTION: Developer
---============================================================================

---============================================================================
---!SECTION: Developer
---============================================================================

return Camera
