---============================================================================
---SECTION: Libraries
---============================================================================

local Core = require("Core:Presentation")
local GMUI = require("GMUI:Presentation")

---============================================================================
---!SECTION: Libraries
---SECTION: Scripts
---============================================================================

local Animation = require("Presentation/Animation")
local DisplayedGameStats = require("SharedData/Game/DisplayedGameStats")
local Vector3 = require("Class/Vector3")

---============================================================================
---!SECTION: Scripts
---SECTION: Definitions
---============================================================================

---@class ZoneCostData
---@field uid integer
---@field resource TRACKED_STATS
---@field spent integer
---@field cost integer

---@class ZoneCostPositionData
---@field uid integer
---@field position Vector2

---============================================================================
---!SECTION: Definitions
---SECTION: Variables
---============================================================================

local ui = GMUI.ui

local ZoneCost = {}

local _Layouts = {}

---============================================================================
---!SECTION: Variables
---SECTION: Local Functions
---============================================================================

---Move Frame to World Position
---@param frame Layout
---@param position Vector2
local function MoveFrameToWorldPosition(frame, position)
    local position_3d = Vector3.New(position.x, 0, position.y)
    DCEI.MoveFrameToCanvasPosition(frame, DCEI.GetCanvasPositionFromWorldPosition(position_3d))
end

---@param data ZoneCostData
---@return Layout
local function CreateZoneCostLayout(data)
    local cost_layout = GMUI.Layout.New({
        name = "Hybrid/ZoneUnlock",
        parent = ui.root,
    })

    _Layouts[data.uid] = cost_layout

    cost_layout.state.cost = data.cost
    cost_layout.state.spent = data.spent
    cost_layout.state.icon = DisplayedGameStats[data.resource].Icon or ""

    return cost_layout
end

---============================================================================
---!SECTION: Local Functions
---SECTION: Methods
---============================================================================

---@param data ZoneCostPositionData
function ZoneCost.UpdatePosition(data)
    local cost_layout = _Layouts[data.uid]
    if not cost_layout then
        return
    end

    MoveFrameToWorldPosition(cost_layout.Frame, data.position)
end

---@param data ZoneCostData
function ZoneCost.Update(data)
    local cost_layout = _Layouts[data.uid]
    if not cost_layout then
        cost_layout = CreateZoneCostLayout(data)
    end

    if cost_layout.state.spent == data.spent then
        return
    end

    cost_layout.state.cost = data.cost
    cost_layout.state.spent = data.spent

    local final_size = 1.3
    if data.cost == data.spent then
        final_size = 1.75
    end

    Animation.Impact(cost_layout.Frame, {
        final_size = final_size
    })
end

---@param uid integer
function ZoneCost.DestroyCost(uid)
    local cost_layout = _Layouts[uid]
    if not cost_layout then
        return
    end

    cost_layout:Destroy()
    _Layouts[uid] = nil
end

---============================================================================
---!SECTION: Methods
---SECTION: Events
---============================================================================

Core.Event.RegisterPresentationEvent("Zone.Update", ZoneCost.Update)
Core.Event.RegisterPresentationEvent("Zone.UpdatePosition", ZoneCost.UpdatePosition)
Core.Event.RegisterPresentationEvent("Zone.Destroy", ZoneCost.DestroyCost)

---============================================================================
---!SECTION: Events
---============================================================================

return ZoneCost
